package com.mycompany.ql_mua_ban_dong_ho;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet; // đọc kết quả từ câu lệnh SELECT
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.mycompany.ql_mua_ban_dong_ho.DatabaseConnection; 
import com.mycompany.ql_mua_ban_dong_ho.ThongKe;
import java.text.DecimalFormat;
import java.text.ParseException;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
public class Giao_dien_chính extends javax.swing.JFrame {
    /**
     * Creates new form Giao_dien_chính
     */
    public Giao_dien_chính() {
        initComponents();
        // Gọi loadDataToTable() bằng SwingUtilities.invokeLater()
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                loadDataToTable(); // phương thức này được gọi sau khi GUI sẵn sàng
            }
        });
         bang.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) { // Đảm bảo chỉ xử lý một lần khi chọn
                    hienThiChiTietDongHo();
                }
            }
        });
    }
public Giao_dien_chính(String username) {
        initComponents(); // Khởi tạo các thành phần giao diện
        tenuser.setText(username); // Gán tên người dùng 
        // Gọi loadDataToTable() sau khi GUI sẵn sàng
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                loadDataToTable();
            }
        });
    bang.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    hienThiChiTietDongHo();
                }
            }

            private void hienThiChiTietDongHo() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }
private void hienThiChiTietDongHo() {
    int selectedRow = bang.getSelectedRow();
    if (selectedRow >= 0) { // Đảm bảo một hàng thực sự được chọn
        TableModel model = bang.getModel();

        // Lấy dữ liệu từ model và điền vào các ô text field
        txtma.setText(model.getValueAt(selectedRow, 0).toString());
        txtten.setText(model.getValueAt(selectedRow, 1).toString());
        
        if (model.getValueAt(selectedRow, 2) != null) {
             cbthuonghieu.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
        }

        txtgia.setText(model.getValueAt(selectedRow, 3).toString());
        // SỬA LỖI: Cột "Đã bán" là index 4, "Số lượng" là index 5
        txtdaban.setText(model.getValueAt(selectedRow, 4).toString());
        txtsoluong.setText(model.getValueAt(selectedRow, 5).toString());
        txtngay.setText(model.getValueAt(selectedRow, 6).toString());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        tenuser = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        thongke = new javax.swing.JButton();
        txtdaban = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lienhe = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        xoa = new javax.swing.JButton();
        sua = new javax.swing.JButton();
        them = new javax.swing.JButton();
        cbthuonghieu = new javax.swing.JComboBox<>();
        txtsoluong = new javax.swing.JTextField();
        txtgia = new javax.swing.JTextField();
        txtngay = new javax.swing.JTextField();
        txtten = new javax.swing.JTextField();
        txtma = new javax.swing.JTextField();
        o6 = new javax.swing.JLabel();
        o1 = new javax.swing.JLabel();
        o5 = new javax.swing.JLabel();
        o4 = new javax.swing.JLabel();
        o3 = new javax.swing.JLabel();
        o2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        thoat = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bang = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel7.setText("*Nhấn vào sản phẩm 2 lần để chọn mua nó");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(220, 390, 260, 16);

        tenuser.setBackground(new java.awt.Color(185, 199, 185));
        tenuser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tenuser.setForeground(new java.awt.Color(0, 51, 0));
        tenuser.setToolTipText("");
        tenuser.setOpaque(true);
        getContentPane().add(tenuser);
        tenuser.setBounds(300, 110, 90, 30);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel6.setText("Người dùng: ");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(220, 110, 90, 30);

        jLabel11.setText("VNĐ");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(160, 280, 30, 30);

        thongke.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        thongke.setText("Thống kê");
        thongke.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        thongke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thongkeActionPerformed(evt);
            }
        });
        getContentPane().add(thongke);
        thongke.setBounds(520, 60, 100, 40);

        txtdaban.setOpaque(true);
        txtdaban.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdabanActionPerformed(evt);
            }
        });
        getContentPane().add(txtdaban);
        txtdaban.setBounds(110, 350, 90, 30);

        jLabel5.setText("Đã bán:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(140, 320, 60, 30);

        lienhe.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lienhe.setText("Liên hệ");
        lienhe.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lienhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lienheActionPerformed(evt);
            }
        });
        getContentPane().add(lienhe);
        lienhe.setBounds(640, 60, 80, 40);

        clear.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clear.setText("Clear");
        clear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(clear);
        clear.setBounds(120, 460, 80, 40);

        xoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        xoa.setText("Xóa");
        xoa.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaActionPerformed(evt);
            }
        });
        getContentPane().add(xoa);
        xoa.setBounds(430, 60, 70, 40);

        sua.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sua.setText("Sửa");
        sua.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suaActionPerformed(evt);
            }
        });
        getContentPane().add(sua);
        sua.setBounds(340, 60, 70, 40);

        them.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        them.setText("Thêm");
        them.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        them.setOpaque(true);
        them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themActionPerformed(evt);
            }
        });
        getContentPane().add(them);
        them.setBounds(240, 60, 80, 40);

        cbthuonghieu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn thương hiệu", "Rolex", "Omega", "Patek Philippe", "Audemars Piguet", "Cartier", "Longines", "Citizen" }));
        getContentPane().add(cbthuonghieu);
        cbthuonghieu.setBounds(10, 220, 190, 40);

        txtsoluong.setOpaque(true);
        txtsoluong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsoluongActionPerformed(evt);
            }
        });
        getContentPane().add(txtsoluong);
        txtsoluong.setBounds(10, 350, 90, 30);

        txtgia.setOpaque(true);
        txtgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgiaActionPerformed(evt);
            }
        });
        getContentPane().add(txtgia);
        txtgia.setBounds(10, 280, 140, 40);

        txtngay.setOpaque(true);
        txtngay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtngayActionPerformed(evt);
            }
        });
        getContentPane().add(txtngay);
        txtngay.setBounds(10, 410, 190, 40);

        txtten.setOpaque(true);
        txtten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttenActionPerformed(evt);
            }
        });
        getContentPane().add(txtten);
        txtten.setBounds(10, 160, 190, 40);

        txtma.setOpaque(true);
        txtma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmaActionPerformed(evt);
            }
        });
        getContentPane().add(txtma);
        txtma.setBounds(10, 100, 190, 40);

        o6.setText("Ngày nhập hàng:");
        getContentPane().add(o6);
        o6.setBounds(10, 390, 100, 20);

        o1.setText("Mã sản phẩm:");
        getContentPane().add(o1);
        o1.setBounds(10, 80, 80, 20);

        o5.setText("Số lượng tồn kho: ");
        getContentPane().add(o5);
        o5.setBounds(10, 320, 100, 30);

        o4.setText("Giá:");
        getContentPane().add(o4);
        o4.setBounds(10, 260, 80, 20);

        o3.setText("Thương hiệu:");
        getContentPane().add(o3);
        o3.setBounds(10, 200, 80, 20);

        o2.setText("Tên đồng hồ: ");
        getContentPane().add(o2);
        o2.setBounds(10, 140, 80, 20);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Thông tin đồng hồ ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(40, 50, 130, 30);

        thoat.setText("Thoát");
        thoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thoatActionPerformed(evt);
            }
        });
        getContentPane().add(thoat);
        thoat.setBounds(760, 420, 80, 40);

        jLabel2.setBackground(new java.awt.Color(27, 69, 25));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("                                                              QUẢN LÝ MUA BÁN ĐỒNG HỒ");
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 920, 50);

        bang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên đồng hồ", "Thương hiệu", "Giá", "Đã bán", "Số lượng", "Ngày nhập hàng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bang);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(210, 150, 710, 230);

        jLabel3.setBackground(new java.awt.Color(158, 186, 155));
        jLabel3.setOpaque(true);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 50, 210, 480);

        jLabel1.setBackground(new java.awt.Color(185, 199, 185));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 920, 540);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmaActionPerformed

    private void txttenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttenActionPerformed

    private void txtngayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtngayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtngayActionPerformed

    private void txtgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgiaActionPerformed

    private void txtsoluongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsoluongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsoluongActionPerformed

    private void themActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themActionPerformed
        // TODO add your handling code here:
    // Lấy dữ liệu từ các ô nhập liệu
        String maSanPham = txtma.getText().trim(); // Lấy giá trị từ ô Mã sản phẩm
        String tenDongHo = txtten.getText().trim(); 
        String thuongHieu = cbthuonghieu.getSelectedItem().toString();
        String giaStr = txtgia.getText().trim();
        String daBanStr = txtdaban.getText().trim();
        String soLuongStr = txtsoluong.getText().trim();
        String ngayNhapHangStr = txtngay.getText().trim(); // Định dạng yyyy-MM-DD

       
        // Kiểm tra rỗng cho tất cả các trường bắt buộc
        if (maSanPham.isEmpty() || tenDongHo.isEmpty() || giaStr.isEmpty() || daBanStr.isEmpty() || soLuongStr.isEmpty() || ngayNhapHangStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin sản phẩm.", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return; 
        }
        if (thuongHieu.equals("Chọn thương hiệu")) {
            // Kiểm tra giá trị mặc định của Combobox
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một thương hiệu hợp lệ!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Khai báo biến trước try
        double gia = 0; // Khởi tạo giá trị mặc định
        int daBan = 0;
        int soLuong = 0;
        java.sql.Date ngayNhapHang = null;

        try {
            // PHẦN PHÂN TÍCH CHUỖI SANG SỐ VÀ NGÀY

            // dùng DecimalFormat để parse giá (có thể có dấu phân cách hàng nghìn)
            DecimalFormat parser = new DecimalFormat("#,##0.###");
            parser.setParseBigDecimal(true); // parse cả số thập phân
            Number number = parser.parse(giaStr);
            gia = number.doubleValue(); // Gán giá trị double vào biến đã khai báo ở ngoài

            // Parse Đã bán và Số lượng sang int
            daBan = Integer.parseInt(daBanStr);
            soLuong = Integer.parseInt(soLuongStr);

            // Parse ngày theo định dạng yyyy-MM-dd
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date parsedUtilDate = sdf.parse(ngayNhapHangStr);
            ngayNhapHang = new java.sql.Date(parsedUtilDate.getTime()); // Chuyển đổi sang java.sql.Date

        } catch (NumberFormatException e) {
            // lỗi nếu Đã bán hoặc Số lượng không phải số nguyên
            JOptionPane.showMessageDialog(this, "Lỗi định dạng số nguyên: Vui lòng nhập số nguyên hợp lệ cho Đã bán và Số lượng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // In stack trace để debug
            return; 
        } catch (ParseException e) { // catch đúng cho ParseException
            // Bắt lỗi parse từ parser.parse(giaStr) HOẶC sdf.parse(ngayNhapHangStr)
            if (e.getMessage() != null && e.getMessage().contains("Unparseable number")) {
                JOptionPane.showMessageDialog(this, "Lỗi định dạng số: Vui lòng nhập giá đúng định dạng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else { // lỗi ParseException khác là lỗi định dạng ngày
                JOptionPane.showMessageDialog(this, "Lỗi định dạng ngày: Vui lòng nhập ngày theo định dạng yyyy-MM-DD.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
            e.printStackTrace();
            return;
        }

        // chèn dữ liệu vào CSDL 
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = DatabaseConnection.getConnection(); // Lấy kết nối từ lớp DatabaseConnection

            if (conn != null) {
                // Câu lệnh SQL INSERT - bao gôgm cột `Mã sản phẩm` VÀ VALUES
                // Để tên cột trong SQL khớp với tên cột trong CSDL 
                String sql = "INSERT INTO dongho (`Mã sản phẩm`, `Tên đồng hồ`, `Thương hiệu`, `Giá`, `Đã bán`, `Số lượng`, `Ngày nhập hàng`) VALUES (?, ?, ?, ?, ?, ?, ?)";
                pstmt = conn.prepareStatement(sql);

                // Thiết lập giá trị cho các tham số (?) theo thứ tự trong câu lệnh INSERT
                pstmt.setString(1, maSanPham); // gán giá trị Mã sản phẩm từ txtma
                pstmt.setString(2, tenDongHo);
                pstmt.setString(3, thuongHieu);
                pstmt.setDouble(4, gia);
                pstmt.setInt(5, daBan);
                pstmt.setInt(6, soLuong);
                pstmt.setDate(7, ngayNhapHang); // setDate cho kiểu Date của SQL

int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    loadDataToTable();
                    clearInputFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Thêm sản phẩm thất bại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Không thể kết nối đến cơ sở dữ liệu.", "Lỗi Kết Nối", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi CSDL khi thêm sản phẩm: " + e.getMessage(), "Lỗi CSDL", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            DatabaseConnection.closeConnection(conn);
        }
    
    }//GEN-LAST:event_themActionPerformed
private void clearInputFields() {
    txtma.setText("");
    txtten.setText("");
    cbthuonghieu.setSelectedIndex(0);
    txtgia.setText("");
    txtdaban.setText("");
    txtsoluong.setText("");
    txtngay.setText("");
    txtma.requestFocus();
}
private void loadDataToTable() {
    // Lấy DefaultTableModel của bang
    DefaultTableModel tbModel = (DefaultTableModel) bang.getModel();

    // Xóa tất cả các dòng dữ liệu hiện có trong JTable
    tbModel.setRowCount(0);
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null; // lưu trữ kết quả từ câu lệnh SELECT

    try {
        conn = DatabaseConnection.getConnection(); // kết nối
        // đối tượng DecimalFormat để định dạng số
        // "#,##0" là: có dấu phẩy phân cách hàng nghìn (#,##), hiển thị ít nhất 1 chữ số (0), không có phần thập phân.
        // 2 chữ số thập phân, dùng "#,##0.00"
        DecimalFormat decimalFormat = new DecimalFormat("#,##0");

        if (conn != null) {
            // Câu lệnh SQL SELECT để lấy tất cả dữ liệu từ bảng dongho
            String sql = "SELECT `Mã sản phẩm`, `Tên đồng hồ`, `Thương hiệu`, `Giá`, `Đã bán`, `Số lượng`, `Ngày nhập hàng` FROM dongho";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery(); // Thực thi lệnh SELECT và lấy kết quả

            // lấy dữ liệu từ ResultSet và cho vào DefaultTableModel
            while (rs.next()) {
                // Lấy dữ liệu từ từng cột của dòng hiện tại trong ResultSet
                String maSanPham = rs.getString("Mã sản phẩm");
                String tenDongHo = rs.getString("Tên đồng hồ");
                String thuongHieu = rs.getString("Thương hiệu");
                double gia = rs.getDouble("Giá");
                // Định dạng giá trị double thành chuỗi
            String giaFormatted = decimalFormat.format(gia);            
                int daBan = rs.getInt("Đã bán");
                int soLuong = rs.getInt("Số lượng");
                java.sql.Date ngayNhapHang = rs.getDate("Ngày nhập hàng");

                // Chuyển đổi ngày về định dạng String (YYYY-MM-DD)
                String ngayNhapHangStr = "";
                if (ngayNhapHang != null) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    ngayNhapHangStr = sdf.format(ngayNhapHang);
                }
                // Tạo một mảng Object chứa dữ liệu của một dòng
                Object[] rowData = {maSanPham, tenDongHo, thuongHieu, giaFormatted, daBan, soLuong, ngayNhapHangStr};
                tbModel.addRow(rowData);
            }
            bang.setModel(tbModel); // Gán DefaultTableModel đã điền dữ liệu vào JTable

        } else {
            //Bẫy lỗi nếu không kết nối được CSDL
            JOptionPane.showMessageDialog(this, "Không thể kết nối để tải dữ liệu.", "Lỗi Kết Nối", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace(); // In lỗi ra console
        JOptionPane.showMessageDialog(this, "Lỗi CSDL khi tải dữ liệu: " + e.getMessage(), "Lỗi CSDL", JOptionPane.ERROR_MESSAGE);
    } finally {
        // đóng ResultSet, PreparedStatement và Connection
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
    private void xoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xoaActionPerformed
DefaultTableModel tbModel = (DefaultTableModel) bang.getModel();
    int selectedRow = bang.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một sản phẩm để xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }
    Object maSanPhamObj = tbModel.getValueAt(selectedRow, 0);
    String maSanPham = (maSanPhamObj != null) ? maSanPhamObj.toString() : null;
    if (maSanPham == null || maSanPham.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Không thể lấy Mã sản phẩm để xóa.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa sản phẩm có Mã: " + maSanPham + " ?",
            "Xác nhận Xóa", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        try {
            conn = DatabaseConnection.getConnection();
            if (conn != null) {
                String sql = "DELETE FROM dongho WHERE `Mã sản phẩm` = ?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, maSanPham);

                int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    tbModel.removeRow(selectedRow);
                    clearInputFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa sản phẩm thất bại (Không tìm thấy sản phẩm).", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                 JOptionPane.showMessageDialog(this, "Không thể kết nối đến cơ sở dữ liệu.", "Lỗi Kết Nối", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi CSDL khi xóa sản phẩm: " + e.getMessage(), "Lỗi CSDL", JOptionPane.ERROR_MESSAGE);
        } finally {
            DatabaseConnection.closeConnection(conn);
        }
    }   
    }//GEN-LAST:event_xoaActionPerformed

    private void lienheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lienheActionPerformed
        // TODO add your handling code here:
         Lienhe lienheForm = new Lienhe(this);  // hiện lại form trước
         lienheForm.setVisible(true);
         this.setVisible(false); // ẩn form trước
    }//GEN-LAST:event_lienheActionPerformed

    private void bangMouseClicked(java.awt.event.MouseEvent evt) {                                  
        // TODO add your handling code here:
           if (evt.getClickCount() == 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        int selectedRow = bang.getSelectedRow();
        if (selectedRow != -1) {
            String maDongHo = bang.getValueAt(selectedRow, 0).toString();
            String tenDongHo = bang.getValueAt(selectedRow, 1).toString();
            String thuongHieu = bang.getValueAt(selectedRow, 2).toString();

            double gia;
            try {
                String giaString = bang.getValueAt(selectedRow, 3).toString();
                giaString = giaString.replaceAll("[^\\d.]", "");
                gia = Double.parseDouble(giaString);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Giá trị 'Giá' không hợp lệ: " + e.getMessage(), "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int soLuongTon;
            try {
                // SỬA LỖI: Lấy số lượng từ cột 5 ("Số lượng")
                soLuongTon = Integer.parseInt(bang.getValueAt(selectedRow, 5).toString());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Giá trị 'Số lượng tồn' không hợp lệ: " + e.getMessage(), "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Mở form mua và truyền dữ liệu
            mua formMua = new mua(this, maDongHo, tenDongHo, thuongHieu, gia, soLuongTon);
            formMua.setVisible(true);
            this.setEnabled(false); // Vô hiệu hóa form chính
        }
    } else if (evt.getClickCount() == 1) { // Xử lý sự kiện nhấp 1 lần để điền dữ liệu
        hienThiChiTietDongHo();
    }
}
    
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
         clearInputFields();
    }//GEN-LAST:event_clearActionPerformed

    private void suaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suaActionPerformed
        // TODO add your handling code here:
    DefaultTableModel tbModel = (DefaultTableModel) bang.getModel();
    int selectedRow = bang.getSelectedRow(); // Lấy chỉ số dòng được chọn

    if (selectedRow == -1) { // Kiểm tra xem có dòng nào được chọn không
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một sản phẩm để sửa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return; // Dừng lại nếu chưa chọn dòng nào
    }
    // Lấy Mã sản phẩm từ dòng được chọn (cột đầu tiên - index 0)
        // Mã sản phẩm được lấy từ ô nhập liệu txtma vì nó không cho sửa khi chọn dòng
        String maSanPham = txtma.getText().trim();

        if (maSanPham.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không thể lấy Mã sản phẩm để sửa.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }


    // Lấy dữ liệu MỚI từ các ô nhập liệu 
    String tenDongHo = txtten.getText().trim();
    String thuongHieu = cbthuonghieu.getSelectedItem().toString();
    String giaStr = txtgia.getText().trim();
    String daBanStr = txtdaban.getText().trim();
    String soLuongStr = txtsoluong.getText().trim();
    String ngayNhapHangStr = txtngay.getText().trim(); // Định dạng mong đợi là YYYY-MM-DD

    // --- Kiểm tra dữ liệu đầu vào cơ bản 
     if (tenDongHo.isEmpty() || giaStr.isEmpty() || daBanStr.isEmpty() || soLuongStr.isEmpty() || ngayNhapHangStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin cập nhật.", "Lỗi", JOptionPane.WARNING_MESSAGE);
        return; // Dừng lại nếu thiếu thông tin
    }

    if (thuongHieu.equals("Chọn thương hiệu")) { // Kiểm tra giá trị mặc định của Combb
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một thương hiệu hợp lệ!", "Lỗi", JOptionPane.WARNING_MESSAGE);
        return;
    }

 // Khai báo biến trước khối try
        double gia = 0; // Khởi tạo giá trị mặc định
        int daBan = 0;
        int soLuong = 0;
        java.sql.Date ngayNhapHang = null;
    try {
        // Chuyển đổi dữ liệu từ String sang các kiểu số và ngày
        DecimalFormat parser = new DecimalFormat("#,##0.###"); 
        parser.setParseBigDecimal(true);
        // Chuyển đổi String (YYYY-MM-DD) sang kiểu java.sql.Date
        Number number = parser.parse(giaStr);
        gia = number.doubleValue(); // Lấy giá trị double từ Number đã parse
        // chuỗi Đã bán (daBanStr) sang int
        daBan = Integer.parseInt(daBanStr); 

        // chuỗi Số lượng (soLuongStr) sang int
        soLuong = Integer.parseInt(soLuongStr);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date parsedDate = sdf.parse(ngayNhapHangStr);
        ngayNhapHang = new java.sql.Date(parsedDate.getTime());
   } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Lỗi định dạng số: Vui lòng nhập số cho Giá, Đã bán, Số lượng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    } catch (java.text.ParseException e) {
         if (e.getMessage().contains("Unparseable number")) {
             JOptionPane.showMessageDialog(this, "Lỗi định dạng số: Vui lòng nhập giá đúng định dạng (ví dụ: 5,000,000).", "Lỗi", JOptionPane.ERROR_MESSAGE);
         } else {
             JOptionPane.showMessageDialog(this, "Lỗi định dạng ngày: Vui lòng nhập ngày theo định dạng yyyy-MM-DD.", "Lỗi", JOptionPane.ERROR_MESSAGE);
         }
         return;
    }

    // cập nhật dữ liệu vào CSDL 
    Connection conn = null;
    PreparedStatement pstmt = null;
    try {
        conn = DatabaseConnection.getConnection(); 

        if (conn != null) {
            // Câu lệnh SQL UPDATE
            // Cập nhật dữ liệu dựa trên Mã sp của dòng được chọn
            String sql = "UPDATE dongho SET `Tên đồng hồ` = ?, `Thương hiệu` = ?, `Giá` = ?, `Đã bán` = ?, `Số lượng` = ?, `Ngày nhập hàng` = ? WHERE `Mã sản phẩm` = ?";
            pstmt = conn.prepareStatement(sql);

            //lập giá trị cho các tham số theo thứ tự trong câu lệnh UPDATE
            pstmt.setString(1, tenDongHo);
            pstmt.setString(2, thuongHieu);
            pstmt.setDouble(3, gia);
            pstmt.setInt(4, daBan);
            pstmt.setInt(5, soLuong);
            pstmt.setDate(6, ngayNhapHang);
            pstmt.setString(7, maSanPham); //là Mã sản phẩm cho điều kiện WHERE

  int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Cập nhật sản phẩm thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                loadDataToTable();
                clearInputFields();
            } else {
                 JOptionPane.showMessageDialog(this, "Cập nhật sản phẩm thất bại (Không tìm thấy sản phẩm).", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
             JOptionPane.showMessageDialog(this, "Không thể kết nối đến cơ sở dữ liệu.", "Lỗi Kết Nối", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi CSDL khi cập nhật sản phẩm: " + e.getMessage(), "Lỗi CSDL", JOptionPane.ERROR_MESSAGE);
    } finally {
        DatabaseConnection.closeConnection(conn);
    }
    
    }//GEN-LAST:event_suaActionPerformed

    private void thoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thoatActionPerformed
        // TODO add your handling code here:
    int chon = JOptionPane.showConfirmDialog(this, "Bạn có muốn thoát không !");
    if(chon==JOptionPane.YES_OPTION){
        System.exit(0);
        }
    }//GEN-LAST:event_thoatActionPerformed

    private void txtdabanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdabanActionPerformed
        // TODO add your handling code here:
         

    }//GEN-LAST:event_txtdabanActionPerformed

    private void thongkeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thongkeActionPerformed
    DefaultTableModel mainTableModel = (DefaultTableModel) bang.getModel();
    if (mainTableModel.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "Bảng dữ liệu đang trống, không có gì để thống kê.",
                                      "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        return; // Dừng lại nếu không có dữ liệu
    }

    ThongKe thongkeForm = new ThongKe(mainTableModel);
    thongkeForm.setVisible(true);
    }//GEN-LAST:event_thongkeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Giao_dien_chính.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Giao_dien_chính.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Giao_dien_chính.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Giao_dien_chính.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Giao_dien_chính().setVisible(true);
            }
        });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bang;
    private javax.swing.JComboBox<String> cbthuonghieu;
    private javax.swing.JButton clear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lienhe;
    private javax.swing.JLabel o1;
    private javax.swing.JLabel o2;
    private javax.swing.JLabel o3;
    private javax.swing.JLabel o4;
    private javax.swing.JLabel o5;
    private javax.swing.JLabel o6;
    private javax.swing.JButton sua;
    private javax.swing.JLabel tenuser;
    private javax.swing.JButton them;
    private javax.swing.JButton thoat;
    private javax.swing.JButton thongke;
    private javax.swing.JTextField txtdaban;
    private javax.swing.JTextField txtgia;
    private javax.swing.JTextField txtma;
    private javax.swing.JTextField txtngay;
    private javax.swing.JTextField txtsoluong;
    private javax.swing.JTextField txtten;
    private javax.swing.JButton xoa;
    // End of variables declaration//GEN-END:variables

    void enableMainForm() { 
    this.setEnabled(true);     // Kích hoạt lại form chính
    this.setVisible(true);     // Hiển thị lại form chính
    this.toFront();            // Đưa form chính lên trên cùng
    this.loadDataToTable();
}
}
